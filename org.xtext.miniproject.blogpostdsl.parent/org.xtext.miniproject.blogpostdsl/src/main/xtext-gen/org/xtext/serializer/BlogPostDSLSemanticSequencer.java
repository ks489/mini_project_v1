/*
 * generated by Xtext 2.10.0
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.blogPostDSL.BlogPostDSLPackage;
import org.xtext.blogPostDSL.Date;
import org.xtext.blogPostDSL.Domainmodel;
import org.xtext.blogPostDSL.Tag;
import org.xtext.blogPostDSL.Tags;
import org.xtext.blogPostDSL.Title;
import org.xtext.services.BlogPostDSLGrammarAccess;

@SuppressWarnings("all")
public class BlogPostDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BlogPostDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BlogPostDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BlogPostDSLPackage.DATE:
				sequence_Date(context, (Date) semanticObject); 
				return; 
			case BlogPostDSLPackage.DOMAINMODEL:
				sequence_Domainmodel(context, (Domainmodel) semanticObject); 
				return; 
			case BlogPostDSLPackage.TAG:
				sequence_Tag(context, (Tag) semanticObject); 
				return; 
			case BlogPostDSLPackage.TAGS:
				sequence_Tags(context, (Tags) semanticObject); 
				return; 
			case BlogPostDSLPackage.TITLE:
				if (rule == grammarAccess.getItemElementRule()) {
					sequence_Article_Blog_Title(context, (Title) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getArticleRule()) {
					sequence_Article_Title(context, (Title) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBlogRule()) {
					sequence_Blog_Title(context, (Title) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSubItemElementRule()
						|| rule == grammarAccess.getTitleRule()) {
					sequence_Title(context, (Title) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ItemElement returns Title
	 *
	 * Constraint:
	 *     (name=ALPHANUMERICDASH ((date=Date? tag=Tags?) | (date=Date? tag=Tags)))
	 */
	protected void sequence_Article_Blog_Title(ISerializationContext context, Title semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Article returns Title
	 *
	 * Constraint:
	 *     (name=ALPHANUMERICDASH date=Date? tag=Tags)
	 */
	protected void sequence_Article_Title(ISerializationContext context, Title semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Blog returns Title
	 *
	 * Constraint:
	 *     (name=ALPHANUMERICDASH date=Date? tag=Tags?)
	 */
	protected void sequence_Blog_Title(ISerializationContext context, Title semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubItemElement returns Date
	 *     Date returns Date
	 *
	 * Constraint:
	 *     name=BLOGDATE
	 */
	protected void sequence_Date(ISerializationContext context, Date semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BlogPostDSLPackage.Literals.DATE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BlogPostDSLPackage.Literals.DATE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDateAccess().getNameBLOGDATETerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Domainmodel returns Domainmodel
	 *
	 * Constraint:
	 *     (tagImport=TagImport* itemElement=ItemElement+)
	 */
	protected void sequence_Domainmodel(ISerializationContext context, Domainmodel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TagImport returns Tag
	 *     Tag returns Tag
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Tag(ISerializationContext context, Tag semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BlogPostDSLPackage.Literals.TAG__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BlogPostDSLPackage.Literals.TAG__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTagAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SubItemElement returns Tags
	 *     Tags returns Tags
	 *
	 * Constraint:
	 *     (name=[Tag|ID] name=[Tag|ID]*)
	 */
	protected void sequence_Tags(ISerializationContext context, Tags semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubItemElement returns Title
	 *     Title returns Title
	 *
	 * Constraint:
	 *     name=ALPHANUMERICDASH
	 */
	protected void sequence_Title(ISerializationContext context, Title semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BlogPostDSLPackage.Literals.TITLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BlogPostDSLPackage.Literals.TITLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTitleAccess().getNameALPHANUMERICDASHTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
