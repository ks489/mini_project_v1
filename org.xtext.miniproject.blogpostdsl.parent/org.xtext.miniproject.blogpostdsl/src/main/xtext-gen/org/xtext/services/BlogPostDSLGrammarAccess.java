/*
 * generated by Xtext 2.10.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BlogPostDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DomainmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.BlogPostDSL.Domainmodel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagImportAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagImportTagImportParserRuleCall_0_0 = (RuleCall)cTagImportAssignment_0.eContents().get(0);
		private final Assignment cItemElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemElementItemElementParserRuleCall_1_0 = (RuleCall)cItemElementAssignment_1.eContents().get(0);
		
		////Model:
		////	greetings+=Greeting*;
		////Greeting:
		////	'Hello' name=ID '!!';
		//Domainmodel:
		//	tagImport=TagImport* itemElement=ItemElement+;
		@Override public ParserRule getRule() { return rule; }
		
		//tagImport=TagImport* itemElement=ItemElement+
		public Group getGroup() { return cGroup; }
		
		//tagImport=TagImport*
		public Assignment getTagImportAssignment_0() { return cTagImportAssignment_0; }
		
		//TagImport
		public RuleCall getTagImportTagImportParserRuleCall_0_0() { return cTagImportTagImportParserRuleCall_0_0; }
		
		//itemElement=ItemElement+
		public Assignment getItemElementAssignment_1() { return cItemElementAssignment_1; }
		
		//ItemElement
		public RuleCall getItemElementItemElementParserRuleCall_1_0() { return cItemElementItemElementParserRuleCall_1_0; }
	}
	public class ItemElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.BlogPostDSL.ItemElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBlogParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArticleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ItemElement:
		//	Blog | Article;
		@Override public ParserRule getRule() { return rule; }
		
		//Blog | Article
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Blog
		public RuleCall getBlogParserRuleCall_0() { return cBlogParserRuleCall_0; }
		
		//Article
		public RuleCall getArticleParserRuleCall_1() { return cArticleParserRuleCall_1; }
	}
	public class BlogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.BlogPostDSL.Blog");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTitleParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDateAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDateDateParserRuleCall_2_1_0 = (RuleCall)cDateAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTagAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTagTagsParserRuleCall_3_1_0 = (RuleCall)cTagAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Blog:
		//	'{' Title (',' date=Date)? (',' tag=Tags)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' Title (',' date=Date)? (',' tag=Tags)? '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//Title
		public RuleCall getTitleParserRuleCall_1() { return cTitleParserRuleCall_1; }
		
		//(',' date=Date)?
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//date=Date
		public Assignment getDateAssignment_2_1() { return cDateAssignment_2_1; }
		
		//Date
		public RuleCall getDateDateParserRuleCall_2_1_0() { return cDateDateParserRuleCall_2_1_0; }
		
		//(',' tag=Tags)?
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//tag=Tags
		public Assignment getTagAssignment_3_1() { return cTagAssignment_3_1; }
		
		//Tags
		public RuleCall getTagTagsParserRuleCall_3_1_0() { return cTagTagsParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ArticleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.BlogPostDSL.Article");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTitleParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDateAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDateDateParserRuleCall_2_1_0 = (RuleCall)cDateAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTagAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTagTagsParserRuleCall_3_1_0 = (RuleCall)cTagAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Article:
		//	'{' Title (',' date=Date)? (',' tag=Tags) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' Title (',' date=Date)? (',' tag=Tags) '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//Title
		public RuleCall getTitleParserRuleCall_1() { return cTitleParserRuleCall_1; }
		
		//(',' date=Date)?
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//date=Date
		public Assignment getDateAssignment_2_1() { return cDateAssignment_2_1; }
		
		//Date
		public RuleCall getDateDateParserRuleCall_2_1_0() { return cDateDateParserRuleCall_2_1_0; }
		
		//(',' tag=Tags)
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//tag=Tags
		public Assignment getTagAssignment_3_1() { return cTagAssignment_3_1; }
		
		//Tags
		public RuleCall getTagTagsParserRuleCall_3_1_0() { return cTagTagsParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TagImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.BlogPostDSL.TagImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTagKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTagParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//TagImport:
		//	'tag ' Tag;
		@Override public ParserRule getRule() { return rule; }
		
		//'tag ' Tag
		public Group getGroup() { return cGroup; }
		
		//'tag '
		public Keyword getTagKeyword_0() { return cTagKeyword_0; }
		
		//Tag
		public RuleCall getTagParserRuleCall_1() { return cTagParserRuleCall_1; }
	}
	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.BlogPostDSL.Tag");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Tag:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class SubItemElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.BlogPostDSL.SubItemElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTitleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTagsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SubItemElement:
		//	Title | Date | Tags;
		@Override public ParserRule getRule() { return rule; }
		
		//Title | Date | Tags
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Title
		public RuleCall getTitleParserRuleCall_0() { return cTitleParserRuleCall_0; }
		
		//Date
		public RuleCall getDateParserRuleCall_1() { return cDateParserRuleCall_1; }
		
		//Tags
		public RuleCall getTagsParserRuleCall_2() { return cTagsParserRuleCall_2; }
	}
	public class TitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.BlogPostDSL.Title");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTitleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameALPHANUMERICDASHTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Title:
		//	'title=' name=ALPHANUMERICDASH;
		@Override public ParserRule getRule() { return rule; }
		
		//'title=' name=ALPHANUMERICDASH
		public Group getGroup() { return cGroup; }
		
		//'title='
		public Keyword getTitleKeyword_0() { return cTitleKeyword_0; }
		
		//name=ALPHANUMERICDASH
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ALPHANUMERICDASH
		public RuleCall getNameALPHANUMERICDASHTerminalRuleCall_1_0() { return cNameALPHANUMERICDASHTerminalRuleCall_1_0; }
	}
	public class DateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.BlogPostDSL.Date");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameBLOGDATETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Date:
		//	'date=' name=BLOGDATE;
		@Override public ParserRule getRule() { return rule; }
		
		//'date=' name=BLOGDATE
		public Group getGroup() { return cGroup; }
		
		//'date='
		public Keyword getDateKeyword_0() { return cDateKeyword_0; }
		
		//name=BLOGDATE
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//BLOGDATE
		public RuleCall getNameBLOGDATETerminalRuleCall_1_0() { return cNameBLOGDATETerminalRuleCall_1_0; }
	}
	public class TagsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.BlogPostDSL.Tags");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTagsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameTagCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameTagIDTerminalRuleCall_1_0_1 = (RuleCall)cNameTagCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cNameTagCrossReference_2_1_0 = (CrossReference)cNameAssignment_2_1.eContents().get(0);
		private final RuleCall cNameTagIDTerminalRuleCall_2_1_0_1 = (RuleCall)cNameTagCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Tags:
		//	'tags=[' name=[Tag] (',' name=[Tag])* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'tags=[' name=[Tag] (',' name=[Tag])* ']'
		public Group getGroup() { return cGroup; }
		
		//'tags=['
		public Keyword getTagsKeyword_0() { return cTagsKeyword_0; }
		
		//name=[Tag]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Tag]
		public CrossReference getNameTagCrossReference_1_0() { return cNameTagCrossReference_1_0; }
		
		//ID
		public RuleCall getNameTagIDTerminalRuleCall_1_0_1() { return cNameTagIDTerminalRuleCall_1_0_1; }
		
		//(',' name=[Tag])*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//name=[Tag]
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//[Tag]
		public CrossReference getNameTagCrossReference_2_1_0() { return cNameTagCrossReference_2_1_0; }
		
		//ID
		public RuleCall getNameTagIDTerminalRuleCall_2_1_0_1() { return cNameTagIDTerminalRuleCall_2_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	
	
	private final DomainmodelElements pDomainmodel;
	private final ItemElementElements pItemElement;
	private final BlogElements pBlog;
	private final ArticleElements pArticle;
	private final TagImportElements pTagImport;
	private final TagElements pTag;
	private final SubItemElementElements pSubItemElement;
	private final TitleElements pTitle;
	private final DateElements pDate;
	private final TagsElements pTags;
	private final TerminalRule tALPHANUMERICDASH;
	private final TerminalRule tBLOGDATE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BlogPostDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainmodel = new DomainmodelElements();
		this.pItemElement = new ItemElementElements();
		this.pBlog = new BlogElements();
		this.pArticle = new ArticleElements();
		this.pTagImport = new TagImportElements();
		this.pTag = new TagElements();
		this.pSubItemElement = new SubItemElementElements();
		this.pTitle = new TitleElements();
		this.pDate = new DateElements();
		this.pTags = new TagsElements();
		this.tALPHANUMERICDASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.BlogPostDSL.ALPHANUMERICDASH");
		this.tBLOGDATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.BlogPostDSL.BLOGDATE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.BlogPostDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////Model:
	////	greetings+=Greeting*;
	////Greeting:
	////	'Hello' name=ID '!!';
	//Domainmodel:
	//	tagImport=TagImport* itemElement=ItemElement+;
	public DomainmodelElements getDomainmodelAccess() {
		return pDomainmodel;
	}
	
	public ParserRule getDomainmodelRule() {
		return getDomainmodelAccess().getRule();
	}
	
	//ItemElement:
	//	Blog | Article;
	public ItemElementElements getItemElementAccess() {
		return pItemElement;
	}
	
	public ParserRule getItemElementRule() {
		return getItemElementAccess().getRule();
	}
	
	//Blog:
	//	'{' Title (',' date=Date)? (',' tag=Tags)? '}';
	public BlogElements getBlogAccess() {
		return pBlog;
	}
	
	public ParserRule getBlogRule() {
		return getBlogAccess().getRule();
	}
	
	//Article:
	//	'{' Title (',' date=Date)? (',' tag=Tags) '}';
	public ArticleElements getArticleAccess() {
		return pArticle;
	}
	
	public ParserRule getArticleRule() {
		return getArticleAccess().getRule();
	}
	
	//TagImport:
	//	'tag ' Tag;
	public TagImportElements getTagImportAccess() {
		return pTagImport;
	}
	
	public ParserRule getTagImportRule() {
		return getTagImportAccess().getRule();
	}
	
	//Tag:
	//	name=ID;
	public TagElements getTagAccess() {
		return pTag;
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}
	
	//SubItemElement:
	//	Title | Date | Tags;
	public SubItemElementElements getSubItemElementAccess() {
		return pSubItemElement;
	}
	
	public ParserRule getSubItemElementRule() {
		return getSubItemElementAccess().getRule();
	}
	
	//Title:
	//	'title=' name=ALPHANUMERICDASH;
	public TitleElements getTitleAccess() {
		return pTitle;
	}
	
	public ParserRule getTitleRule() {
		return getTitleAccess().getRule();
	}
	
	//Date:
	//	'date=' name=BLOGDATE;
	public DateElements getDateAccess() {
		return pDate;
	}
	
	public ParserRule getDateRule() {
		return getDateAccess().getRule();
	}
	
	//Tags:
	//	'tags=[' name=[Tag] (',' name=[Tag])* ']';
	public TagsElements getTagsAccess() {
		return pTags;
	}
	
	public ParserRule getTagsRule() {
		return getTagsAccess().getRule();
	}
	
	//terminal ALPHANUMERICDASH:
	//	('0'..'9' | 'A'..'Z' | 'a'..'z')* '-' ('0'..'9' | 'A'..'Z' | 'a'..'z')**;
	public TerminalRule getALPHANUMERICDASHRule() {
		return tALPHANUMERICDASH;
	}
	
	//terminal BLOGDATE:
	//	'0'..'9' '0'..'9' '0'..'9' '0'..'9' '-' '0'..'9' '0'..'9' '-' '0'..'9' '0'..'9';
	public TerminalRule getBLOGDATERule() {
		return tBLOGDATE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
